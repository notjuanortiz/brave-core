diff --git a/third_party/blink/renderer/core/dom/element.cc b/third_party/blink/renderer/core/dom/element.cc
index a1bbda4ac2ee3cfb3198970645a02f2a21f30167..beb9e924d17dc754d543f45e6639afc09c60ee08 100644
--- a/third_party/blink/renderer/core/dom/element.cc
+++ b/third_party/blink/renderer/core/dom/element.cc
@@ -163,6 +163,15 @@
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 #include "third_party/blink/renderer/platform/wtf/text/text_position.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include <iostream>
+#include "third_party/blink/renderer/core/dom/document.h"
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#include "brave/third_party/blink/brave_page_graph/utilities/dispatchers.h"
+#endif
+
 namespace blink {
 
 using namespace html_names;
@@ -346,7 +355,14 @@ Element* Element::Create(const QualifiedName& tag_name, Document* document) {
 Element::Element(const QualifiedName& tag_name,
                  Document* document,
                  ConstructionType type)
-    : ContainerNode(document, type), tag_name_(tag_name) {}
+    : ContainerNode(document, type), tag_name_(tag_name) {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  if (GetDocument().GetPageGraph() != nullptr) {
+    GetDocument().GetPageGraph()->RegisterHTMLElementNodeCreated(
+      DOMNodeIds::IdForNode(this), tag_name_.ToString());
+  }
+#endif
+}
 
 inline ElementRareData* Element::GetElementRareData() const {
   DCHECK(HasRareData());
@@ -1757,6 +1773,14 @@ static inline AtomicString MakeIdForStyleResolution(const AtomicString& value,
 
 DISABLE_CFI_PERF
 void Element::AttributeChanged(const AttributeModificationParams& params) {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  ::brave_page_graph::PageGraph* page_graph = GetDocument().GetPageGraph();
+  if (page_graph != nullptr) {
+    brave_page_graph::DispatchAttributeChanged(page_graph,
+        DOMNodeIds::IdForNode(this), params.name.ToString(),
+        params.old_value, params.new_value);
+  }
+#endif
   const QualifiedName& name = params.name;
   if (ShadowRoot* parent_shadow_root =
           ShadowRootWhereNodeCanBeDistributedForV0(*this)) {
