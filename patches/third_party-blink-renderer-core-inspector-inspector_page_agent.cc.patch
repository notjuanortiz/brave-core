diff --git a/third_party/blink/renderer/core/inspector/inspector_page_agent.cc b/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
index 97e0828889ab3073958088ef1f0517c8abc50a69..0e6a0538a7121af0717237eaf1f2276c1491e29d 100644
--- a/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
+++ b/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
@@ -82,6 +82,8 @@
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 #include "v8/include/v8-inspector.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 namespace blink {
 
 using protocol::Response;
@@ -833,7 +835,7 @@ void InspectorPageAgent::DidClearDocumentOfWindowObject(LocalFrame* frame) {
     const String world_name = worlds_to_evaluate_on_load_.Get(key);
     if (world_name.IsEmpty()) {
       frame->GetScriptController().ExecuteScriptInMainWorld(
-          source, ScriptSourceLocationType::kUnknown,
+          source, ScriptSourceLocationType::kInspector,
           ScriptController::kExecuteScriptWhenScriptsDisabled);
       continue;
     }
@@ -862,12 +864,14 @@ void InspectorPageAgent::DidClearDocumentOfWindowObject(LocalFrame* frame) {
     // a foreign world.
     v8::HandleScope handle_scope(V8PerIsolateData::MainThreadIsolate());
     frame->GetScriptController().ExecuteScriptInIsolatedWorld(
-        world_id, source, KURL(), SanitizeScriptErrors::kSanitize);
+        world_id,
+        ScriptSourceCode(source, ScriptSourceLocationType::kInspector), KURL(),
+        SanitizeScriptErrors::kSanitize);
   }
 
   if (!script_to_evaluate_on_load_once_.IsEmpty()) {
     frame->GetScriptController().ExecuteScriptInMainWorld(
-        script_to_evaluate_on_load_once_, ScriptSourceLocationType::kUnknown,
+        script_to_evaluate_on_load_once_, ScriptSourceLocationType::kInspector,
         ScriptController::kExecuteScriptWhenScriptsDisabled);
   }
 }
@@ -1350,6 +1354,24 @@ Response InspectorPageAgent::waitForDebugger() {
   return Response::OK();
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+Response InspectorPageAgent::generatePageGraph(String* data) {
+  LocalFrame* main_frame = inspected_frames_->Root();
+  if (!main_frame) {
+    return Response::Error("No main frame found");
+  }
+
+  Document* document = main_frame->GetDocument();
+  if (!document) {
+    return Response::Error("No Document instance to generate page graph for");
+  }
+
+  std::string page_graph(document->GetPageGraph()->ToGraphML());
+  *data = String::FromUTF8(page_graph.c_str());
+  return Response::OK();
+}
+#endif
+
 protocol::Response InspectorPageAgent::generateTestReport(const String& message,
                                                           Maybe<String> group) {
   Document* document = inspected_frames_->Root()->GetDocument();
