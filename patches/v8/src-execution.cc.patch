diff --git a/src/execution.cc b/src/execution.cc
index 187ec4647938ff4b0007e8730e612df2cd284f3d..1f347bc70e10292ddded1e94093b25e26415c31d 100644
--- a/src/execution.cc
+++ b/src/execution.cc
@@ -13,6 +13,8 @@
 #include "src/vm-state-inl.h"
 #include "src/wasm/wasm-engine.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 namespace v8 {
 namespace internal {
 
@@ -168,6 +170,26 @@ Handle<Code> JSEntry(Isolate* isolate, Execution::Target execution_target,
   UNREACHABLE();
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+inline int GetTargetScriptId(Isolate* isolate, Handle<Object> target) {
+  while (target->IsJSBoundFunction()) {
+    Handle<JSBoundFunction> bound_function = Handle<JSBoundFunction>::cast(target);
+    target = Handle<Object>(bound_function->bound_target_function(), isolate);
+  }
+
+  if (target->IsJSFunction()) {
+    Handle<JSFunction> function = Handle<JSFunction>::cast(target);
+    Object maybe_script = function->shared()->script();
+    if (maybe_script.IsScript()) {
+      Script script = Script::cast(maybe_script);
+      return script->id();
+    }
+  }
+
+  return 0;
+}
+#endif
+
 V8_WARN_UNUSED_RESULT MaybeHandle<Object> Invoke(Isolate* isolate,
                                                  const InvokeParams& params) {
   RuntimeCallTimerScope timer(isolate, RuntimeCallCounterId::kInvoke);
@@ -234,6 +256,19 @@ V8_WARN_UNUSED_RESULT MaybeHandle<Object> Invoke(Isolate* isolate,
     return isolate->factory()->undefined_value();
   }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    const ScriptStartFunc start_func = isolate->GetRegisterScriptStartFunc();
+    if (start_func) {
+      const int script_id = GetTargetScriptId(isolate, params.target);
+      if (script_id) {
+        v8::Isolate* v8_isolate = reinterpret_cast<v8::Isolate*>(isolate);
+        start_func(*v8_isolate, script_id);
+      }
+    }
+  }
+#endif
+
   // Placeholder for return value.
   Object value;
 
@@ -283,6 +318,19 @@ V8_WARN_UNUSED_RESULT MaybeHandle<Object> Invoke(Isolate* isolate,
     }
   }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    const ScriptStartFunc end_func = isolate->GetRegisterScriptEndFunc();
+    if (end_func) {
+      const int script_id = GetTargetScriptId(isolate, params.target);
+      if (script_id) {
+        v8::Isolate* v8_isolate = reinterpret_cast<v8::Isolate*>(isolate);
+        end_func(*v8_isolate, script_id);
+      }
+    }
+  }
+#endif
+
 #ifdef VERIFY_HEAP
   if (FLAG_verify_heap) {
     value->ObjectVerify(isolate);
