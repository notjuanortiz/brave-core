diff --git a/third_party/blink/renderer/core/html/html_frame_owner_element.cc b/third_party/blink/renderer/core/html/html_frame_owner_element.cc
index 1b2e72efde8a0773528c87dcd0379601488621f2..777818fd71a82d12868a06dd7a9b93f9c22fea8d 100644
--- a/third_party/blink/renderer/core/html/html_frame_owner_element.cc
+++ b/third_party/blink/renderer/core/html/html_frame_owner_element.cc
@@ -53,6 +53,12 @@
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace blink {
 
 namespace {
@@ -175,6 +181,21 @@ LayoutEmbeddedContent* HTMLFrameOwnerElement::GetLayoutEmbeddedContent() const {
 }
 
 void HTMLFrameOwnerElement::SetContentFrame(Frame& frame) {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    ::brave_page_graph::PageGraph* page_graph = GetDocument().GetPageGraph();
+    if (page_graph != nullptr) {
+      const QualifiedName src_attr_name(
+          WTF::g_null_atom, "src", WTF::g_null_atom);
+      const String& src_attr = FastGetAttribute(src_attr_name);
+      if (src_attr != WTF::g_null_atom) {
+        page_graph->RegisterContentFrameSet(
+            DOMNodeIds::IdForNode(this), src_attr);
+      }
+    }
+  }
+#endif
+
   // Make sure we will not end up with two frames referencing the same owner
   // element.
   DCHECK(!content_frame_ || content_frame_->Owner() != this);
