diff --git a/third_party/blink/renderer/core/style/style_fetched_image.cc b/third_party/blink/renderer/core/style/style_fetched_image.cc
index f6586b48641c05dec3e2171ab1c0131c9af0c6f7..e1c37fcba00658533d37bd249d594f3c660289e6 100644
--- a/third_party/blink/renderer/core/style/style_fetched_image.cc
+++ b/third_party/blink/renderer/core/style/style_fetched_image.cc
@@ -36,6 +36,15 @@
 #include "third_party/blink/renderer/platform/geometry/layout_size.h"
 #include "third_party/blink/renderer/platform/graphics/placeholder_image.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include <sstream>
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#include "brave/third_party/blink/brave_page_graph/utilities/request_metadata.h"
+#endif
+
 namespace blink {
 
 StyleFetchedImage::StyleFetchedImage(const Document& document,
@@ -45,7 +54,21 @@ StyleFetchedImage::StyleFetchedImage(const Document& document,
   is_image_resource_ = true;
   is_lazyload_possibly_deferred_ = is_lazyload_possibly_deferred;
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  image_ = ImageResourceContent::Fetch(params,
+      document_->Fetcher(), &inspector_id_);
+  {
+    Document* mutable_document = (Document*)(document_.Get());
+    ::brave_page_graph::PageGraph* page_graph =
+        mutable_document->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterRequestStartFromCSS(inspector_id_, params.Url(),
+          ::brave_page_graph::RequestType::kRequestTypeImage);
+    }
+  }
+#else
   image_ = ImageResourceContent::Fetch(params, document_->Fetcher());
+#endif
   image_->AddObserver(this);
   // ResourceFetcher is not determined from StyleFetchedImage and it is
   // impossible to send a request for refetching.
@@ -126,7 +149,36 @@ void StyleFetchedImage::RemoveClient(ImageResourceObserver* observer) {
   image_->RemoveObserver(observer);
 }
 
-void StyleFetchedImage::ImageNotifyFinished(ImageResourceContent*) {
+void StyleFetchedImage::ImageNotifyFinished(ImageResourceContent* resource) {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    Document* mutable_document = (Document*)(document_.Get());
+    ::brave_page_graph::PageGraph* page_graph =
+        mutable_document->GetPageGraph();
+    if (page_graph != nullptr) {
+      const ResourceResponse& rep = resource->GetResponse();
+
+      // Convert the response headers into a single string.
+      std::stringstream ss;
+      const HTTPHeaderMap& headers = rep.HttpHeaderFields();
+      for (HTTPHeaderMap::const_iterator it = headers.begin();
+          it != headers.end(); ++it) {
+        ss << it->key << " " << it->value << "\n";
+      }
+
+      const WTF::String& response_header(ss.str().c_str());
+      brave_page_graph::RequestMetadata metadata(
+          response_header, rep.EncodedBodyLength());
+
+      if (resource->ErrorOccurred()) {
+        page_graph->RegisterRequestError(inspector_id_, metadata);
+      } else {
+        page_graph->RegisterRequestComplete(inspector_id_,
+            ResourceType::kImage, metadata);
+      }
+    }
+  }
+#endif
   if (image_ && image_->HasImage()) {
     Image& image = *image_->GetImage();
 
